#include <stdio.h>
#include <stdlib.h>
// Define the node structure
typedef struct Node {
    int data;
    struct Node* next;
} Node;

// Create a new node with given value
Node* createNode(int value,int i) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    if (newNode == NULL) {
        printf("Memory allocation failed.\n");
        exit(1);
    }
 
    newNode->data = value;
    newNode->next = NULL;
    printf("Node %d -> Address: %p, Value: %d\n", i, (void*)newNode, newNode->data);
    i++;
    return newNode;
}

// Traverse and print memory information
void traverseList(Node* head) {
    Node* current = head;
    int index = 0;

    while (current != NULL) {
        printf("Node %d: Value = %d, Address = %p, Next = %p\n",
            index, current->data, (void*)current, (void*)current->next);
        current = current->next;
        index++;
    }
}

Node* insert(Node* head, int v,int pos,int i)
{
    Node* insert=createNode(v, i);
    Node* Target = head;
    int count = 0;
    while (Target != NULL&&count < pos) 
    { 
        Target = Target->next;
        count++;
    }
    insert->next = Target->next;
    Target->next = insert;
    return head;

}
Node* deletetail(Node* head)
{
    Node* Target = head;
    Node* Prev = head;
    int i = 0; 
    while (Target->next != NULL)
    {
        Prev = Target;
        Target = Target->next;
        i++;
    }
    Prev->next = NULL;
    printf("Node %d -> Address: %p, Value: %d\n", i, (void*)Target, Target->data);
    free(Target);
    return head;

}
int main() 
{
    // Create linked list: 10 -> 20 -> 30 -> NULL
    Node* head = createNode(10,0);
    head->next = createNode(20,1);
    head->next->next = createNode(30,2);

    // Traverse and print
    printf("Traversing the linked list:\n");
    traverseList(head);
    head = insert(head,40,1,3);
    head =deletetail(head);

    // Free memory
    Node* current = head;

    while (current != NULL) 
    {
        Node* temp = current;
        current = current->next;
        free(temp);
        printf("address %p\n",(void*)temp);
    }
}
